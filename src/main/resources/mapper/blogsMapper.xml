<?xml version="1.0" encoding="UTF-8"?>  
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.ykse.blogs.dao.BlogsDao">
	<resultMap id="BLOGSTABLE" type="com.ykse.blogs.bean.Blogs">
		<id column="BLOGS_ID" property="blogsId" jdbcType="INTEGER" />
		<result column="BLOGS_TITLE" property="blogsTitle" jdbcType="VARCHAR" />
		<result column="BLOGS_CONTENT" property="blogsContent" jdbcType="VARCHAR" />
		<result column="VIEW_COUNT" property="viewCount" jdbcType="INTEGER" />
		<result column="COMMENTCOUNT" property="commentCount" jdbcType="INTEGER" />
		<result column="SUPPORT" property="support" jdbcType="INTEGER" />
		<result column="NONSUPPORT" property="nonsupport" jdbcType="INTEGER" />
		<result column="RATE" property="rate" jdbcType="DOUBLE" />
		<result column="CREATETIME" property="createTime" jdbcType="TIMESTAMP" />
		<association column="USER_ID" property="user" select="com.ykse.blogs.dao.UserDao.getUserById" />
	</resultMap>
	
	<sql id="Base_Column_List" >
    	blogstable.BLOGS_ID,
		blogstable.BLOGS_TITLE,
		blogstable.BLOGS_CONTENT,
		blogstable.VIEW_COUNT,
		blogstable.COMMENTCOUNT,
		blogstable.SUPPORT,
		blogstable.NONSUPPORT,
		blogstable.RATE,
		blogstable.USER_ID,
		blogstable.CREATETIME
  	</sql>
  
	<sql id="Where_Clause">
		<if test="blogs.user.userId != null">
			and user_id = #{blogs.user.userId}
		</if>
	</sql>
	
	<select id="getBlogsById" parameterType="int" resultMap="BLOGSTABLE">
		SELECT *
		FROM BLOGSTABLE 
		WHERE BLOGS_ID = #{blogsId}
	</select>
	
	<select id="getBlogsAll" resultMap="BLOGSTABLE">
		SELECT 
		<include refid="Base_Column_List" />
		FROM BLOGSTABLE 
		ORDER BY CREATETIME DESC
    	LIMIT #{startRow}, #{endRow}      	 
 	</select>
	
	<select id="getBlogsCount" resultType="java.lang.Integer">
    	SELECT COUNT(*) FROM BLOGSTABLE  
  	</select>
  	
  	<select id="getBlogsByParam" resultMap="BLOGSTABLE">
		SELECT
		<include refid="Base_Column_List" />
		FROM BLOGSTABLE
		<where>
			<include refid="Where_Clause"/>
		</where>
		ORDER BY CREATETIME DESC
    	LIMIT #{startRow}, #{endRow}
 	</select>
	
	<select id="getBlogsCountByParam" resultType="java.lang.Integer">
    	SELECT COUNT(*) FROM BLOGSTABLE
    	<where>
			<include refid="Where_Clause"/>
		</where>
  	</select>
 	
 	<select id="getHeatedBlogsAll" resultMap="BLOGSTABLE">
		SELECT 
		<include refid="Base_Column_List" />
		FROM BLOGSTABLE 
		ORDER BY RATE DESC
    	LIMIT #{startRow}, #{endRow}      	 
 	</select>
 	
	<select id="getHeatedBlogsByParam" resultMap="BLOGSTABLE">
		SELECT
		<include refid="Base_Column_List" />
		FROM BLOGSTABLE
		<where>
			<include refid="Where_Clause"/>
		</where>
		ORDER BY RATE DESC
    	LIMIT #{startRow}, #{endRow}
 	</select>
  	
	<insert id="saveBlogs" parameterType="blogs" useGeneratedKeys="true" keyProperty="Blogs_ID">
		INSERT INTO BLOGSTABLE(BLOGS_TITLE, BLOGS_CONTENT, CREATETIME, USER_ID)
		VALUES(#{blogsTitle}, #{blogsContent}, now(), #{user.userId})
	</insert>
	
   	<update id="updateBlogs" parameterType="blogs">
		UPDATE BLOGSTABLE 
		SET BLOGS_TITLE = #{blogsTitle}, 
		BLOGS_CONTENT = #{blogsContent}
		WHERE BLOGS_ID = #{blogsId}
	</update>
	
	<update id="updateViewCount" parameterType="blogs">
		UPDATE BLOGSTABLE 
		SET VIEW_COUNT = #{viewCount}
		WHERE BLOGS_ID = #{blogsId}
	</update>
	
	<update id="deleteBlogsById" parameterType="int">
		DELETE FROM BLOGSTABLE  
		WHERE BLOGS_ID = #{blogsId}
	</update>

	<update id="addCountById" parameterType="int">
		UPDATE BLOGSTABLE 
		SET COMMENTCOUNT = COMMENTCOUNT + 1
		WHERE BLOGS_ID = #{blogsId}
	</update>
	
	<update id="subtractCountById" parameterType="int">
		UPDATE BLOGSTABLE 
		SET COMMENTCOUNT = COMMENTCOUNT - 1
		WHERE BLOGS_ID = #{blogsId}
	</update>
	
	<update id="updateSupportCountById" parameterType="int">
		UPDATE BLOGSTABLE 
		SET SUPPORT = (
			SELECT COUNT(*)
			FROM STANDPOINTTABLE
			WHERE BLOGS_ID = #{blogsId}
			AND TYPE = 1),
		NONSUPPORT = (
			SELECT COUNT(*)
			FROM STANDPOINTTABLE
			WHERE BLOGS_ID = #{blogsId}
			AND TYPE = 2)
		WHERE BLOGS_ID = #{blogsId}
	</update>
	
	<update id="updateSupportRateById">
		UPDATE BLOGSTABLE 
		SET RATE = #{rate}
		WHERE BLOGS_ID = #{blogsId}
	</update>
	
</mapper>